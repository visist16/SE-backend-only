openapi: 3.0.0
info:
  title: My Flask API Documentation
  description: Documentation for various APIs in my Flask application
  version: '1.0'
  contact:
    name: Visist Tallam
    email: 21f2001553@ds.study.iitm.ac.in
tags:
  - name: Authentication
    description: Endpoints related to user authentication
  - name: User Management
    description: Endpoints for managing user profiles and tickets
  - name: Staff Actions
    description: Endpoints accessible to staff members
  - name: Admin Operations
    description: Endpoints accessible to administrators
  - name: Discourse Integration
    description: Endpoints for interacting with Discourse forum
  - name: Notifications
    description: Endpoints for retrieving user notifications
  - name: Support Topics
    description: Endpoints related to support topics and categories
paths:
  /login:
    post:
      summary: User login endpoint
      description: Endpoint to authenticate users and generate JWT token
      operationId: Login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address
                password:
                  type: string
                  description: User's password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Login success message
                  token:
                    type: string
                    description: JWT token for accessing protected endpoints
                  id:
                    type: integer
                    description: User ID
                  role:
                    type: integer
                    description: User role ID
        '401':
          description: Unauthorized (bad email or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '409':
          description: Conflict (user does not exist)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  /api/user/profile:
    get:
      summary: Get user profile
      description: Retrieve user profile information
      operationId: UserProfile
      tags:
        - User Management
      parameters:
        - name: user_id
          in: query
          description: User ID to fetch profile for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response with user profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                        description: User's username
                      email:
                        type: string
                        description: User's email address
                      role:
                        type: integer
                        description: User's role ID
                      discourse_id:
                        type: string
                        description: User's Discourse ID
                      status:
                        type: integer
                        description: User's status
                      notification:
                        type: boolean
                        description: User's notification setting
                      email_notif:
                        type: boolean
                        description: User's email notification setting
                      webhook_notif:
                        type: boolean
                        description: User's webhook notification setting
        '401':
          description: Error response indicating failed to fetch user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  /api/user/tickets:
    get:
      summary: Get user's tickets
      description: Retrieve tickets created by the user
      operationId: YourTickets
      tags:
        - User Management
      parameters:
        - name: user_id
          in: query
          description: User ID to fetch tickets for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response with user's ticket data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Ticket ID
                        title:
                          type: string
                          description: Ticket title
                        description:
                          type: string
                          description: Ticket description
                        date:
                          type: string
                          description: Ticket creation date
                        category:
                          type: string
                          description: Ticket category
                        tags:
                          type: array
                          items:
                            type: string
                            description: Ticket tags
                        offensive:
                          type: boolean
                          description: Whether the ticket is offensive
                        escalated:
                          type: boolean
                          description: Whether the ticket is escalated
                        resolved:
                          type: boolean
                          description: Whether the ticket is resolved
                        merged:
                          type: boolean
                          description: Whether the ticket is merged
        '401':
          description: Error response indicating failed to retrieve user's tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message  

  /api/user/newticket:
    post:
      summary: Create a new ticket
      description: Endpoint to create a new support ticket
      operationId: NewTicket
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the ticket
                description:
                  type: string
                  description: Description of the ticket
                creator:
                  type: integer
                  description: User ID of the ticket creator
                category:
                  type: string
                  description: Category of the ticket
                tags:
                  type: array
                  items:
                    type: string
                    description: Tags associated with the ticket
      responses:
        '200':
          description: Ticket created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message indicating ticket creation
        '401':
          description: Error response indicating failed to create ticket
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
 
  /api/user/recommendations:
    get:
      summary: Get recommendations before creating tickets
      description: Retrieve recommendations based on category and tags to assist users in issue matching.
      tags:
        - User Management
      operationId: Recommendations
      parameters:
        - name: category
          in: query
          description: Category ID for recommendations
          required: true
          schema:
            type: integer
        - name: tags
          in: query
          description: Tags associated with user's issue
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful response with recommendations data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object

  /api/user/match:
    post:
      summary: Match user's issue with a topic
      description: Match a user's issue with a topic instead of creating a new ticket.
      tags:
        - User Management
      operationId: MatchTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: User ID
                topic_id:
                  type: integer
                  description: Topic ID to match with user's issue
      responses:
        '200':
          description: Successful response indicating issue matched with topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message

  /api/user/faqs:
    get:
      summary: Fetch FAQs
      description: Retrieve frequently asked questions (FAQs) and update posts accordingly.
      tags:
        - User Management
      operationId: FAQs
      responses:
        '200':
          description: Successful response with FAQ data
          content:
            application/json:
              schema:
                type: object
                properties:
                  FAQs:
                    type: array
                    items:
                      type: object
        '401':
          description: Error response indicating failed to fetch FAQs
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error

  /api/staff/createtopic:
    post:
      summary: Create a new topic from a local ticket
      description: Create a new Discourse topic based on a local ticket for staff members.
      tags:
        - Staff Actions
      operationId: CreateTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket_id:
                  type: integer
                  description: ID of the local ticket to create a topic from
                cat_id:
                  type: integer
                  description: Category ID for the new Discourse topic
      responses:
        '200':
          description: Successful response with topic creation details
          content:
            application/json:
              schema:
                type: object

  /api/staff/edittopic:
    patch:
      summary: Edit an existing topic
      description: Edit the title and category of an existing Discourse topic.
      tags:
        - Staff Actions
      operationId: EditTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic_id:
                  type: integer
                  description: ID of the topic to edit
                title:
                  type: string
                  description: New title for the topic
                category_id:
                  type: integer
                  description: New category ID for the topic
      responses:
        '200':
          description: Successful response with updated topic details
          content:
            application/json:
              schema:
                type: object

  /api/staff/merge:
    put:
      summary: Merge a ticket with a topic
      description: Merge a ticket with a specified Discourse topic.
      tags:
        - Staff Actions
      operationId: Merge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket_id:
                  type: integer
                  description: ID of the ticket to merge
                topic_id:
                  type: integer
                  description: ID of the topic to merge with
      responses:
        '200':
          description: Successful response confirming ticket merge
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/staff/resolveticket:
    put:
      summary: Resolve a ticket
      description: Mark a ticket as resolved.
      tags:
        - Staff Actions
      operationId: ResolveTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket_id:
                  type: integer
                  description: ID of the ticket to resolve
      responses:
        '200':
          description: Successful response confirming ticket resolution
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/staff/resolvetopic:
    put:
      summary: Resolve a topic with a resolution
      description: Post a resolution to a topic and mark it as resolved.
      tags:
        - Staff Actions
      operationId: ResolveTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resolution:
                  type: string
                  description: Resolution text for the topic
                topic_id:
                  type: integer
                  description: ID of the topic to resolve
      responses:
        '200':
          description: Successful response confirming topic resolution
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  
  /api/staff/profile:
    get:
      summary: Get staff profile details
      description: Retrieve the profile details of a staff member by ID.
      tags:
        - Staff Actions
      operationId: StaffProfile
      responses:
        '200':
          description: Successful response containing staff profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      discourse_id:
                        type: string
                      status:
                        type: integer
                      notification:
                        type: integer
                      email_notif:
                        type: integer
                      webhook_notif:
                        type: integer

  /api/staff/category:
    get:
      summary: Get allotted categories for a staff member
      description: Retrieve the categories allotted to a staff member.
      tags:
        - Staff Actions
      operationId: AllottedCategory
      responses:
        '200':
          description: Successful response containing allotted categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        staff_id:
                          type: integer
                        category:
                          type: string

  /api/staff/respond:
    post:
      summary: Respond to a ticket
      description: Post a response to a ticket.
      tags:
        - Staff Actions
      operationId: Respond
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket_id:
                  type: integer
                  description: ID of the ticket being responded to
                responder:
                  type: string
                  description: ID or name of the staff member responding
                response:
                  type: string
                  description: Response content
      responses:
        '200':
          description: Successful response confirming the response submission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/staff/requestfaq:
    post:
      summary: Request a FAQ
      description: Request to add a topic and solution post ID to FAQs.
      tags:
        - Staff Actions
      operationId: requestFAQ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic_id:
                  type: integer
                  description: ID of the topic to add to FAQs
                solution_post_id:
                  type: integer
                  description: ID of the solution post related to the topic
      responses:
        '200':
          description: Successful response confirming the FAQ request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/staff/requestcategory:
    post:
      summary: Request a category allotment
      description: Request to allot a category to a staff member.
      tags:
        - Staff Actions
      operationId: RequestCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staff_id:
                  type: integer
                  description: ID of the staff member requesting the category
                category:
                  type: string
                  description: Category to be allotted
      responses:
        '200':
          description: Successful response confirming the category request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/staff/updatesetting:
    patch:
      summary: Update user settings
      description: Update notification settings for a user.
      tags:
        - Staff Actions
      operationId: UpdateSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ID of the user whose settings will be updated
                notification:
                  type: integer
                  description: Notification setting (1 for ON, 0 for OFF)
                email_notif:
                  type: integer
                  description: Email notification setting (1 for ON, 0 for OFF)
                webhook_notif:
                  type: integer
                  description: Webhook notification setting (1 for ON, 0 for OFF)
      responses:
        '200':
          description: Successful response confirming the settings update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/admin/createcategory:
    post:
      summary: Create a category
      description: Endpoint to create a new category (restricted to admin)
      tags:
        - Admin Operations
      operationId: CreateCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the category
                color:
                  type: string
                  description: Color code for the category
      responses:
        '200':
          description: Successful response confirming category creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/admin/editcategory:
    patch:
      summary: Update a category
      description: Endpoint to update an existing category (restricted to admin)
      tags:
        - Admin Operations
      operationId: EditCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ID of the category to be updated
                name:
                  type: string
                  description: New name for the category
                color:
                  type: string
                  description: New color code for the category
      responses:
        '200':
          description: Successful response confirming category update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/admin/home:
    get:
      summary: Get admin dashboard statistics
      description: Endpoint to fetch statistics for the admin dashboard
      tags:
        - Admin Operations
      operationId: AdminHome
      responses:
        '200':
          description: Successful response with admin dashboard statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_count:
                    type: integer
                  staff_count:
                    type: integer
                  ticket_count:
                    type: integer
                  topic_count:
                    type: integer
                  category_count:
                    type: integer
                  faq_count:
                    type: integer
                  response_count:
                    type: integer

  /api/admin/admingetrequest:
    get:
      summary: Retrieve pending category and FAQ requests
      operationId: AdminGetRequest
      responses:
        '200':
          description: Successful response
      tags:
        - Admin Operations
  /api/admin/adminpostrequest:
    patch:
      summary: Process administrative responses to requests
      operationId: AdminPostRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                section:
                  type: string
                staff_id:
                  type: integer
                category:
                  type: string
                cat_response:
                  type: integer
                topic_id:
                  type: integer
                solution_post_id:
                  type: integer
                faq_response:
                  type: integer
      responses:
        '200':
          description: Successful response
      tags:
        - Admin Operations
  /api/admin/revokestaff:
    patch:
      summary: Revoke or update staff status
      operationId: RevokeStaff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staff_id:
                  type: integer
                revoked:
                  type: string
      responses:
        '200':
          description: Successful response
      tags:
        - Admin Operations
  /api/admin/revokecategory:
    delete:
      summary: Revoke a category for a staff member
      operationId: RevokeCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staff_id:
                  type: integer
                category:
                  type: string
      responses:
        '200':
          description: Successful response
      tags:
        - Admin Operations
  /api/admin/addstaff:
    patch:
      summary: Add user as staff member
      operationId: AddStaff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                add_staff:
                  type: string
      responses:
        '200':
          description: Successful response
      tags:
        - Admin Operations
  /api/admin/blockuser:
    patch:
      summary: Block or unblock user
      operationId: BlockUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                blocked:
                  type: string
      responses:
        '200':
          description: Successful response
      tags:
        - Admin Operations
  
    /api/discourse/self_account/activate:
    get:
      summary: Activate or deactivate user account
      operationId: Verification
      responses:
        '200':
          description: Successful activation/deactivation
      tags:
        - Discourse Integration
  /api/discourse/register:
    post:
      summary: Register a new user
      operationId: Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  user:
                    type: string
                  email:
                    type: string
                  role:
                    type: integer
                  message:
                    type: string
                  code:
                    type: integer
      tags:
        - Discourse Integration
 
  /api/notifications:
    get:
      summary: Retrieve all notifications for a user
      operationId: Notifications
      responses:
        '200':
          description: Successful retrieval of notifications
          content:
            application/json:
              schema:
                type: object
      tags:
        - Notifications

  /api/topics:
    get:
      summary: Retrieve topics by category ID or category slug
      operationId: Topics
      parameters:
        - in: query
          name: slug
          schema:
            type: string
          description: Slug of the category
        - in: query
          name: id
          schema:
            type: integer
          description: ID of the category
      responses:
        '200':
          description: Successful retrieval of topics
          content:
            application/json:
              schema:
                type: object
      tags:
        - Support Topics

  /api/categories:
    get:
      summary: Retrieve all categories
      operationId: Categories
      responses:
        '200':
          description: Successful retrieval of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      tags:
        - Categories